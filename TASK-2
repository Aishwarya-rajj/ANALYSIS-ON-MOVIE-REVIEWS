import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from wordcloud import WordCloud
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import PorterStemmer
nltk.download('stopwords')
data = pd.read_csv('/content/IMDB Dataset.csv')    
print(data.info())
print(data.head())
stop_words = set(stopwords.words('english'))
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove punctuation and special characters
    text = [word for word in text.split() if word not in stop_words]
    return ' '.join(text)
data['cleaned_review'] = data['review'].apply(lambda x: clean_text(x))
data['cleaned_review'] = data['review'].apply(clean_text)
positive_text = ' '.join(data[data['sentiment'] == 'positive']['cleaned_review'])
negative_text = ' '.join(data[data['sentiment'] == 'negative']['cleaned_review'])
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title('Positive Reviews Word Cloud')
plt.imshow(WordCloud(background_color='white').generate(positive_text))
plt.axis('off')
plt.subplot(1, 2, 2)
plt.title('Negative Reviews Word Cloud')
plt.imshow(WordCloud(background_color='black').generate(negative_text))
plt.axis('off')
plt.show()
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(data['cleaned_review'])
y = data['sentiment'].map({'positive': 1, 'negative': 0})
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = MultinomialNB()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))
conf_mat = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()
